import { compile, type JSONSchema as JSONSchema2 } from 'json-schema-to-typescript';
import _ from 'lodash';
import fs from 'fs';
import path from 'path';

import { convertToJSONSchema } from './utils/ConvertToJSONSchema.util';
import { convertToYup } from './utils/ConvertToYup.util';

import { YuppiOptionsDefault } from './defaults/YuppiOptions.default';

import type { AnyObject } from './types/AnyObject.type';
import type { JSONSchema } from './types/JSONSchema.type';
import type { Schema } from './types/Schema.type';
import type { YuppiOptions } from './types/YuppiOptions.type';

export class Yuppi {
  private readonly options: YuppiOptions;

  public constructor(options: YuppiOptions = YuppiOptionsDefault) {
    this.options = _.merge({}, YuppiOptionsDefault, options);
  }

  public validate(schema: Schema, properties: AnyObject) {
    const yup_schema = this.convertToYup(schema);

    return yup_schema.validateSync(properties, this.options.validate_options);
  }

  public declare(schema: Schema, name: string) {
    name = name.toLowerCase();

    const types_dir = path.join(this.options.folder_path ?? './', 'yuppi', 'types');
    const banner_comment = `/* eslint-disable */

/**
 * This type was automatically generated by **Yuppi**.
 * _DO NOT MODIFY IT BY HAND_. Instead, modify your Yuppi schema.
 * Use \`Yuppi.declare()\` to regenerate this type.
 */`;

    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    compile(this.convertToJSONSchema(schema) as JSONSchema2, name, { bannerComment: banner_comment }).then((type) => {
      fs.mkdirSync(types_dir, { recursive: true });

      fs.writeFileSync(path.join(types_dir, `${name}.d.ts`), type);
    });
  }

  public convertToYup(schema: Schema) {
    return convertToYup(schema, this.options.error_messages);
  }

  public convertToJSONSchema(schema: Schema): JSONSchema {
    return JSON.parse(JSON.stringify(convertToJSONSchema(schema))) as JSONSchema;
  }
}
